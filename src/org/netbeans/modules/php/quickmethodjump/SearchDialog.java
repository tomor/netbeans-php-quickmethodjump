/**
 * The MIT License.
 *
 * Copyright (c) 2014 Tomas Ptacnik (tomor)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

package org.netbeans.modules.php.quickmethodjump;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.ListModel;

/**
 *
 * @author tomor
 */
public class SearchDialog extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    /**
     * Editor component helper class
     */
    private final ComponentHelper cpHelper;

    /**
     * Creates new form QuickMethodJumpDialog
     */
    public SearchDialog(java.awt.Frame parent, boolean modal, List<MLine> lines, ComponentHelper cpHelper) {
        super(parent, modal);
        initComponents();

        this.cpHelper = cpHelper;

        initMethodsList(lines);

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /**
     * Set methods to the list
     */
    private void initMethodsList(final List<MLine> lines) {
        ListModel source = new javax.swing.AbstractListModel() {
            List<MLine> rows = new ArrayList<MLine>(lines);
            @Override
            public int getSize() { return rows.size(); }
            @Override
            public Object getElementAt(int i) { return rows.get(i); }
        };

        FilteredListModel filteredListModel = new FilteredListModel(source);

        methodsList.setModel(filteredListModel);
    }

    /**
     * Method for setting caret position in document
     */
    private void jumpToMethod() {
        MLine selectedLine = (MLine)this.methodsList.getSelectedValue();
        if (selectedLine != null) {
            this.cpHelper.setCarretPosition(selectedLine.getlinePositionInDocument());
        }
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        sarchTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        methodsList = new javax.swing.JList();

        setTitle(org.openide.util.NbBundle.getMessage(SearchDialog.class, "SearchDialog.title")); // NOI18N
        setPreferredSize(new java.awt.Dimension(600, 450));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(okButton, org.openide.util.NbBundle.getMessage(SearchDialog.class, "SearchDialog.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(SearchDialog.class, "SearchDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        org.openide.awt.Mnemonics.setLocalizedText(titleLabel, org.openide.util.NbBundle.getMessage(SearchDialog.class, "SearchDialog.titleLabel.text")); // NOI18N

        sarchTextField.setText(org.openide.util.NbBundle.getMessage(SearchDialog.class, "SearchDialog.sarchTextField.text")); // NOI18N
        sarchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sarchTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sarchTextFieldKeyTyped(evt);
            }
        });

        methodsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        methodsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                methodsListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(methodsList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(sarchTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 238, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sarchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void methodsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_methodsListMouseClicked
        // on doubleclick jump..
        if (evt.getClickCount() == 2) {
            doClose(RET_OK);
        }
    }//GEN-LAST:event_methodsListMouseClicked

    /**
     * Writing into search field will filter methods list
     *
     * @param evt
     */
    private void sarchTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sarchTextFieldKeyTyped
        final String searchedText = sarchTextField.getText();

        // get filtered model from menu
        FilteredListModel model = (FilteredListModel)methodsList.getModel();

        // set filter which will select lines which contains searched text in the method name
        model.setFilter(new FilteredListModel.Filter() {
            @Override
            public boolean accept(Object element) {
                MLine line = (MLine)element;
                return line.getMethodName().toLowerCase().contains(searchedText.toLowerCase());
            }
        });

        // after text is searched, try to select first method from the list
        if (model.getSize() > 0) {
            this.methodsList.setSelectedIndex(0);
        }

    }//GEN-LAST:event_sarchTextFieldKeyTyped

    /**
     * When focus is in search field - user can write search phrase and
     * UP and DOWN arrow can select methods from the methods list
     *
     * @param evt
     */
    private void sarchTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sarchTextFieldKeyPressed
        int size          = this.methodsList.getModel().getSize();
        int maxIndex      = size-1;
        int minIndex      = 0;
        int selectedIndex = this.methodsList.getSelectedIndex();

        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            if ((selectedIndex + 1) <= maxIndex) {
                this.methodsList.setSelectedIndex(selectedIndex + 1);
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            if ((selectedIndex - 1) >= minIndex) {
                this.methodsList.setSelectedIndex(selectedIndex - 1);
            }
        }
    }//GEN-LAST:event_sarchTextFieldKeyPressed

    private void doClose(int retStatus) {
        returnStatus = retStatus;

        if (returnStatus == RET_OK) {
            jumpToMethod();
        }
        setVisible(false);
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList methodsList;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField sarchTextField;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;
}
